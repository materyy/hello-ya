#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct studentnode    //学生信息结点
{
	char name[30];
	char sex;
	int grade[3];
}Student;

typedef struct node      //定义链表结点
{
	Student student;
	struct node *left;
	struct node *right;
}node;

void init();
node *create();
int newwtrite(node *head);
void newlist(node *head);
int insert(node *head,Student message);
int deletestudent(node *head);
int deletenode(node *head,char *name);
void searchstudent(node *head);
node *searchnode(node *head,char *name);
void sort(node *head,int len);
int length(node *head);
int print(node *head);
int save(node *head);



//主函数
int main()
{
	init();
	puts("学生信息管理系统：");
	puts("目前所有学生：");
	node *head=create();
	newlist(head);
	while(1)
	{
		int len=length(head);
		sort(head,len);
		system("CLS");
		puts("学生信息管理系统：");
		puts("目前所有学生：");
		print(head);
		printf("1->添加\t2->删除\t3->查找4->保存5->退出\n");
		int select=0;
		scanf("%d",&select);
		switch(select)
		{
		case 1:
			newwtrite(head);
			system("CLS");
			puts("学生信息管理系统：");
			puts("目前所有学生：");
			print(head);
			break;
		case 2:
			deletestudent(head);
			system("CLS");
			puts("学生信息管理系统：");
			puts("目前所有学生：");
			print(head);
			break;
		case 3:
			searchstudent(head);
			printf("按任意键返回主菜单\n");
			getchar();
			break;
		case 4:
			save(head);
			printf("保存成功!\n");
			system("CLS");
			puts("学生信息管理系统：");
			puts("目前所有学生：");
			newlist(head);
			print(head);
			break;
		case 5:
			printf("程序即将退出！\n");
			save(head);
			printf("保存成功！\n");
			exit(1);
			break;
		}
	}
	return 0;
}

//自定义函数

//写入文件
void init()
{
	FILE *fp=fopen("D:/啊啊啊实验室","w");
	Student students[4]={{"haha",'g',99,98,97},{"lala",'g',87,89,88},{"xixi",'b',90,90,90},{"dixi",'g',97,96,70}};
	fwrite(students,sizeof(Student),4,fp);
	fclose(fp);
}

//创建双向链表
node *create()
{
	node *head=(node*)malloc(sizeof(node));
	if(head)
	{
		head->left=head;
		head->right=head;
		return head;
	}
	else 
		return NULL;
}



//功能
int newwtrite(node *head)
{
	Student newstudent;
	puts("please input new student's message:");
	printf("name:");
	scanf("%s",newstudent.name);
	printf("sex:");
	scanf("%s",newstudent.sex);
	printf("3 grades:\nChinese/Math/English:");
	scanf("%d %d %d",&newstudent.grade[0],&newstudent.grade[1],&newstudent.grade[2]);
	insert(head,newstudent);
}

//插入
int insert(node *head,Student message)
{
	node *newnode=(node *)malloc(sizeof(node));
	if(newnode)
	{
		newnode->student=message;
		newnode->left=head;
		newnode->right=head->right;
		head->right=newnode;
		newnode->right->left=newnode;
		return 1;
	}
	else 
		return -1;
}

//初始化链表
void newlist(node *head)
{
	FILE *fop=fopen("D:/啊啊啊实验室/studentslist.txt","r");
	Student newstudent;
	while(fread(&newstudent,sizeof(Student),1,fop)!=0)
		insert(head,newstudent);
}

//删除*
int deletestudent(node *head)
{
	printf("please input the name of the student who need to be deleted:");
	char name[30];
	scanf("%s",name);
	int thisname=deletenode(head,name);
	if(thisname)
		puts("success!");
	else
		puts("failure!");
	return thisname;
}

//删除
int deletenode(node *head,char *name)
{
	node *searchstudent;
		searchstudent=searchnode(head,name);
	if(searchstudent)
	{
		searchstudent->left->right=searchstudent->right;
		searchstudent->right->left=searchstudeht->left;
		free(searchstudent);
		return 1;
	}
	else 
		return 0;
}

//查找*
void searchstudent(node *head)
{
	printf("plrase inpnut the name of the student who need to deleted:");
	char name[30];
	scanf("%s",name);
	node *thestudent=searchnode(head,name);
	if(thestudent)
	{
		printf("姓名\t性别\t语文\t数学\t英语\n");
		printf("%s\t%c\t%d\t%d\t%d\n",thestudent->student.name,thestudent->student.sex,thestudent->student.grade[0],thestudnet->student.grade[1],thestudnet->student.grade[2]);
	}
	else
		puts("can't find the student!");
}

//查找
node *searchnode(node *head,char *name)
{
	node *left=head;
	node *right=head;
	do
	{
		left=left->left;
		right=right->right;
		if(strcmp(left->student.name,name)==0)
			return left;
		if(strcmp(right->student.name,name)==0)
			return right;
	}while(left!=right&&left->left!=right);
	return NULL;
}

//排序
void sort(node *head,int len)
{
	node *p,*q,*max,*tmp;
	Student t;
	p=head->right;
	q=p->right;
	int i=0,j=0;
	for(i=0;i<len-1;i++)
	{
		if(p==head)  break;
		max=p;
		q=p;
		for(j=i;j<len;j++)
		{
			if(q==head)
				break;
			if(strcmp(max->student.name,q->student.name)>0)
				max=q;
			q=q->right;
		}
		if(max!=p)
		{
			t=max->student;
			max->student=p->student;
			p->student=t;
		}
		p=p->right;
	}
}

//长度
int length(node *head)
{
	node *p=head;
	int len=0;
	while(p->right!=head)
	{
		len++;
		p=p->right;
	}
	return len;
}

//print
int print(node *head)
{
	node *p=head->right;
	while(p!=head)
	{
		printf("%s\t%c\t%d\t%d\t%d\n", p->student.name, p->student.sex,p->student.grade[0], p->student.grade[1], p->student.grade[2]);
		p=p->right;
	}
}

//更新文件中内容
int save(node *head)
{
	FILE *fop=fopen("D:/啊啊啊实验室/student.txt","b");
	node *p=head->right;
	while(p!=head)
	{
		fwrite(&p->student,sizeof(Student),1,fop);
		p=p->right;
	}
	return 1;
}
